{"version":3,"sources":["components/TasksFilter.js","components/Footer.js","components/Header.js","components/Task.js","components/TaskList.js","components/App.js","index.js"],"names":["filterButton","TasksFilter","changeFilter","filter","className","map","item","cn","selected","onClick","Footer","deleteCompletedtask","count","Header","addTask","placeholder","autoFocus","onKeyDown","e","keyCode","target","value","trim","Task","id","description","created","editing","done","changeStatusTask","deleteTask","startEditTask","finishEditTask","type","defaultChecked","formatDistanceToNow","includeSeconds","defaultValue","onBlur","TaskList","tasks","App","fakeId","state","props","data","newTasks","setState","newTask","Date","text","renderList","filterTask","term","renderListItem","this","length","React","Component","defaultProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9a48110a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport cn from 'classnames';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst filterButton = [\r\n 'All',\r\n 'Active',\r\n 'Completed'\r\n];\r\n\r\nconst TasksFilter = ({ changeFilter, filter }) => {\r\n  return (\r\n    <ul className=\"filters\">\r\n      {\r\n        filterButton.map( item => {\r\n\r\n          const className = cn({\r\n            selected: item === filter\r\n          })\r\n\r\n          return (\r\n            <li key={item} >\r\n              <button className={className} onClick={() => changeFilter(item)}> \r\n                {item}\r\n              </button>\r\n            </li>\r\n          );\r\n        })\r\n      }\r\n    </ul>\r\n  );\r\n};\r\n\r\nTasksFilter.propTypes = {\r\n  changeFilter: PropTypes.func.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default TasksFilter;\r\n","import React from \"react\";\r\nimport TasksFilter from './TasksFilter';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Footer = ({ changeFilter, filter, deleteCompletedtask, count }) => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <span className=\"todo-count\">{count} items left</span>\r\n      <TasksFilter \r\n        changeFilter={changeFilter} \r\n        filter={filter}\r\n      />\r\n      <button \r\n        className=\"clear-completed\"\r\n        onClick={deleteCompletedtask}\r\n      >Clear completed</button>\r\n    </footer>\r\n  );\r\n};\r\n\r\nFooter.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  changeFilter: PropTypes.func.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n  deleteCompletedtask: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = ({addTask}) => {\r\n\r\n  function addnewTask(e) {\r\n\r\n    if (e.keyCode === 13) {\r\n      addTask(e.target.value.trim());\r\n      e.target.value = '';\r\n    }\r\n  }\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>todos</h1>\r\n      <input className=\"new-todo\" placeholder=\"What needs to be done?\" autoFocus  onKeyDown={addnewTask}/>\r\n    </header>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  addTask: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport cn from 'classnames';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport PropTypes, { func } from 'prop-types';\r\n\r\nconst Task = ({ id, description, created, editing, done, changeStatusTask, deleteTask, startEditTask, finishEditTask  }) => {\r\n\r\n  const className = cn({\r\n    'completed': done && !editing,\r\n    'active': !done && !editing,\r\n    'editing': editing\r\n  })\r\n\r\n  function editTask(e) {\r\n\r\n    if (e.keyCode === 13) {\r\n      finishEditTask(id , e.target.value.trim());\r\n      e.target.value = '';\r\n    }\r\n  }\r\n\r\n  return (\r\n    <li className={className}>\r\n      <div className=\"view\">\r\n        <input className=\"toggle\" type=\"checkbox\" onClick={() => changeStatusTask(id)} defaultChecked={done}/>\r\n        <label>\r\n          <span className=\"description\">{description}</span>\r\n          <span className=\"created\">created: {formatDistanceToNow(created, { includeSeconds: true })}</span>\r\n        </label>\r\n        <button className=\"icon icon-edit\" onClick={() => startEditTask(id)}></button>\r\n        <button className=\"icon icon-destroy\" onClick={() => deleteTask(id)}></button>\r\n      </div>\r\n      {editing ? <input type=\"text\" className=\"edit\" defaultValue={description} onKeyDown={editTask} autoFocus onBlur={() => finishEditTask(id, description)} /> : null}\r\n    </li>\r\n  );\r\n};\r\n\r\nTask.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  description: PropTypes.string.isRequired,\r\n  editing: PropTypes.bool.isRequired,\r\n  status: PropTypes.string,\r\n  done: PropTypes.bool.isRequired,\r\n  changeStatusTask: PropTypes.func.isRequired,\r\n  deleteTask: PropTypes.func.isRequired,\r\n  startEditTask: PropTypes.func.isRequired,\r\n  finishEditTask: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Task;","import React from \"react\";\r\nimport Task from './Task';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nconst TaskList = ({ tasks, changeStatusTask, deleteTask, startEditTask, finishEditTask }) => {\r\n\r\n\r\n  return (\r\n    <ul className=\"todo-list\">\r\n      {\r\n        tasks.map( (item) => {\r\n          const { id } = item\r\n          return (\r\n          <Task key={id} {...item} \r\n            changeStatusTask={changeStatusTask} \r\n            deleteTask={deleteTask}\r\n            startEditTask={startEditTask}\r\n            finishEditTask={finishEditTask}\r\n          />\r\n          );\r\n        })\r\n      }\r\n    </ul>\r\n  );\r\n};\r\n\r\nTaskList.propTypes = {\r\n  tasks: PropTypes.array.isRequired,\r\n  changeStatusTask: PropTypes.func.isRequired,\r\n  deleteTask: PropTypes.func.isRequired,\r\n  startEditTask: PropTypes.func.isRequired,\r\n  finishEditTask: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TaskList;\r\n","import React from \"react\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport TaskList from \"./TaskList\";\n\n\nclass App extends React.Component {\n\n  fakeId = 100\n\n  state = this.props.data\n\n  changeStatusTask = (id) => {\n    const oldTasks = [...this.state.tasks]\n\n    const newTasks = oldTasks.map(item => {\n      if (item.id === id) {\n        return {...item, done: !item.done}\n      }\n      return item;\n    })\n\n    this.setState({\n      tasks: newTasks\n    })\n  }\n  \n  deleteTask = (id) => {\n\n    const oldTasks = [...this.state.tasks]\n\n    const newTasks = oldTasks.filter(item => item.id !== id)\n\n    this.setState({\n      tasks: newTasks\n    })\n    \n  }\n\n  deleteCompletedtask = () => {\n    const oldTasks = [...this.state.tasks];\n    const newTasks = oldTasks.filter(item => !item.done)\n    this.setState({\n      tasks: newTasks\n    })\n  }\n\n  addTask = (description) => {\n\n    const newTask = {\n      editing: false,\n      id: this.fakeId++,\n      created: new Date(),\n      description,\n      done: false\n    }\n\n    this.setState({\n      tasks: [...this.state.tasks, newTask]\n    })\n\n  }\n\n  startEditTask = (id) => {\n    const oldTasks = [...this.state.tasks]\n\n    const newTasks = oldTasks.map(item => {\n      if (item.id === id) {\n        return {...item, editing: true}\n      }\n      return item;\n    })\n\n    this.setState({\n      tasks: newTasks\n    })\n  }\n\n  finishEditTask = (id, text) => {\n    const oldTasks = [...this.state.tasks]\n\n    const newTasks = oldTasks.map(item => {\n      if (item.id === id) {\n        return {...item, editing: false, description: text}\n      }\n      return item;\n    })\n\n    this.setState({\n      tasks: newTasks\n    })\n  }\n\n\n  renderList = () => {\n\n    const filter = this.state.filterTask\n\n    switch (filter) {\n      case 'All' : return this.state.tasks;\n      case 'Active': return this.state.tasks.filter(item => !item.done);\n      case 'Completed': return this.state.tasks.filter(item => item.done);\n      default: return this.state.tasks;\n    }\n  }\n\n  changeFilter = (term) => {\n    this.setState({\n      filterTask: term\n    })\n  }\n\n  render() {\n\n    const renderListItem = this.renderList();\n\n    const count = this.state.tasks.filter(item => !item.done).length;\n\n    return (\n      <section className=\"todoapp\">\n        <Header addTask={this.addTask}/>\n        <section className=\"main\">\n          <TaskList \n            startEditTask={this.startEditTask}\n            finishEditTask={this.finishEditTask}\n            tasks={renderListItem} \n            changeStatusTask={this.changeStatusTask} \n            deleteTask={this.deleteTask} \n          />\n          <Footer \n            changeFilter={this.changeFilter} \n            filter={this.state.filterTask} \n            deleteCompletedtask={this.deleteCompletedtask}\n            count={count}\n          />\n        </section>\n      </section>\n    );\n  }\n}\n\nApp.defaultProps = {\n  data: {\n    tasks : [\n      {\n        editing: false,\n        done: true,\n        id: 1,\n        created: new Date(2020, 6, 2),\n        description: \"Completed task\",\n      },\n      {\n        editing: false,\n        done: true,\n        id: 2,\n        created: new Date(2021, 6, 2),\n        description: \"Editing task\",\n      },\n      {\n        editing: false,\n        done: false,\n        id: 3,\n        created: new Date(1992, 6, 2),\n        description: \"Active task\",\n      },\n    ],\n    filterTask: 'All'\n  }\n};\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\n\n\n\nReactDOM.render(<App  />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}